AWSTemplateFormatVersion: "2010-09-09"

Description: Lambda functions for scanning iOLAP Academy services

# Lambdas for scanning - Done
# Lambda role - Done
# Lambda Invoke config
# S3 bucket for Lambda zip file - Done
# SNS topic + sub - Done
# EventBridge cron job rule - Done

Resources:
  # S3Bucket:
  #   Type: AWS::S3::Bucket
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  #   Properties:
  #     BucketName: academy-lambda-bucket

  EventBridgeCron:
    Type: AWS::Events::Rule
    Properties:
      Name: AcademyScanCron
      Description: Lambda cronjob for Academy
      ScheduleExpression: cron(36 13 * * ? *)
      Targets: 
        - Arn:
            Fn::GetAtt:
              - "LambdaAcademy"
              - "Arn"
          Id: "LambdaTarget"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaAcademy
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "EventBridgeCron"
          - "Arn"

  AcademyScanTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AcademyScanTopic

  AcademyScanSub:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: dpresnjak@iolap.com
      TopicArn: !Ref AcademyScanTopic

  LambdaAcademy:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: academy-lambda-bucket
        S3Key: lambda_function.zip
      Description: Academy scan function
      FunctionName: "AcademyScanLambda"
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.9
      Timeout: 60

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: AWSLambdaAcademy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: [
                  "lambda:ListFunctions",
                  "lambda:GetFunctionConcurrency",
                  "dynamodb:DescribeTable",
                  "dynamodb:ListTables",
                  "lambda:GetFunction",
                  "glue:ListJobs",
                  "glue:GetJob"]
                Resource: "*"
              - Effect: "Allow"
                Action: [
                  "sns:Publish",
                  "logs:CreateLogGroup"]
                Resource: [
                  "arn:aws:sns:us-east-1:*:AcademyScanTopic",
                  "arn:aws:logs:us-east-1:*:*"]
              - Effect: "Allow"
                Action: [
                  "lambda:ListFunctions",
                  "lambda:GetFunctionConcurrency"]
                Resource: "arn:aws:lambda:*:176984903748:function:*"